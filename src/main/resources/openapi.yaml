swagger: "2.0"
info:
  description: "This is a ticketing server used in the sqa lecture to practice test automation"
  version: "1.0.0"
  title: "SQA Ticketing"
  contact:
    email: "sqa@swc.rwth-aachen.de"
host: "localhost:8080"
tags:
  - name: "customers"
    description: "Everything about the customers"
  - name: "discount cards"
    description: "Access to ordered discount cards"
  - name: "tickets"
    description: "Access to ticket endpoints"
  - name: "ticket validation"
    description: "Access to ticket validation"
schemes:
  - "http"
paths:
  /customers:
    post:
      tags:
        - "customers"
      summary: "Add a new customer"
      description: "Adds a new customer that can order cards. The id must not be set in the request but has to be present in the response. The disabled flag should default to false if not set in the request. Make sure that the status codes are reported correctly."
      operationId: "addCustomer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer object that should be added"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "201":
          description: "Saved"
          schema:
            $ref: "#/definitions/Customer"
        "400":
          description: "Invalid input"
  /customers/{customerId}/discountcards:
    post:
      tags:
        - "discount cards"
      summary: "add a discount card to a customer"
      description: "The id field must not be set in the request but has to be present in the response."
      operationId: "addDiscountCardToCustomer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "customerId"
          in: "path"
          description: "ID of customer"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "DiscountCard object that needs to be added to the customer"
          required: true
          schema:
            $ref: "#/definitions/DiscountCard"
      responses:
        "201":
          description: "Saved"
          schema:
            $ref: "#/definitions/DiscountCard"
        "409":
          description: "Conflict. There is a card that is valid in the same timeframe or part of it"
        "400":
          description: "Invalid input"
        "404":
          description: "Customer not found"
    get:
      tags:
        - "discount cards"
      summary: "Find discount cards of given customer"
      description: "Returns a list of discount cards for the given customer order by validFrom"
      operationId: "getCustomerDiscountCards"
      produces:
        - "application/json"
      parameters:
        - name: "customerId"
          in: "path"
          description: "ID of customer to search for discount cards"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DiscountCard"
        "400":
          description: "Invalid ID supplied. E.g. not a number"
        "404":
          description: "Customer doesnt exist or no card found"
  /tickets:
    post:
      tags:
        - "tickets"
      summary: "buy a new ticket"
      description: "buy a new ticket. disabled, discountCard and student are optional and should default to false if not set. See Ticket table for avaiable Tickettypes. Tickets for 24h, 30d and 1year are valid in all zones. Ticket types marked with a - in the table are not sold by the company and thus should result in an invalid request."
      operationId: "buyTicket"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "TicketRequest object"
          required: true
          schema:
            $ref: "#/definitions/TicketRequest"
      responses:
        "201":
          description: "Ticket is saved"
          schema:
            $ref: "#/definitions/Ticket"
        "400":
          description: "Invalid Request. No such Ticket exists"
  /tickets/validate:
    post:
      tags:
        - "ticket validation"
      summary: "Check if a ticket is valid"
      description: "Check if a ticket is valid given the required information to do a validation. Should be invalid if one of the ticket properties doesn't match the provided properties or a non existing discouncardid is provided. Zone B includes Zone A. Furthermore Zone C includes all Zones. Also check for the correct discount card and date of validity. If the request is malformed a 400 Return Code should be returned."
      operationId: "validateTicket"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "TicketValidationRequest object that needs to validated"
          required: true
          schema:
            $ref: "#/definitions/TicketValidationRequest"
      responses:
        "200":
          description: "Ticket is valid"
        "403":
          description: "Ticket is not valid"
        "400":
          description: "Invalid Request"
definitions:
  Customer:
    type: "object"
    required:
      - "birthdate"
    properties:
      id:
        type: "integer"
        format: "int64"
      birthdate:
        type: "string"
        example: "1992-01-01"
      disabled:
        type: "boolean"
  DiscountCard:
    type: "object"
    required:
      - "customerId"
      - "type"
      - "validFrom"
      - "validFor"
    properties:
      id:
        type: "integer"
        format: "int64"
      customerId:
        type: "integer"
        format: "int64"
      type:
        type: "integer"
        enum: [ 25,50 ]
      validFrom:
        type: "string"
        example: "1992-01-01"
      validFor:
        type: "string"
        enum: [ "30d", "1y" ]
  TicketValidationRequest:
    type: "object"
    required:
      - "ticketId"
      - "zone"
      - "date"
    properties:
      ticketId:
        type: "integer"
        format: "int64"
      zone:
        description: "Zone the validator is in"
        type: "string"
        enum: [ A,B,C ]
      date:
        type: "string"
        example: "2020-10-29T10:38:59"
      disabled:
        type: "boolean"
      discountCardId:
        type: "integer"
        format: "int64"
      student:
        type: "boolean"
  TicketRequest:
    type: "object"
    required:
      - "date"
      - "birthdate"
      - "validFor"
      - "validFrom"
    properties:
      validFrom:
        type: "string"
        example: "2020-10-29T10:38:59"
      birthdate:
        type: "string"
        example: "1992-01-01"
      validFor:
        type: "string"
        enum: [ 1h, 1d, 30d, 1y ]
      disabled:
        type: "boolean"
      discountCard:
        type: "integer"
        enum: [25,50]
      zone:
        type: "string"
        enum: [ A,B,C ]
      student:
        type: "boolean"
  Ticket:
    type: "object"
    required:
      - "id"
      - "validFrom"
      - "birthdate"
      - "validFor"
      - "disabled"
      - "discountCard"
      - "student"
    properties:
      id:
        type: "integer"
        format: "int64"
      validFrom:
        type: "string"
        example: "2020-10-29T10:38:59"
      birthdate:
        type: "string"
        example: "1992-01-01"
      validFor:
        type: "string"
        enum: [ 1h, 1d, 30d, 1y ]
      disabled:
        type: "boolean"
      discountCard:
        type: "integer"
        enum: [25,50]
      zone:
        type: "string"
        enum: [ A,B,C ]
      student:
        type: "boolean"